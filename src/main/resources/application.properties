server.port=${PORT:8080}

# API 호출시, SQL 문을 콘솔에 출력한다.
spring.jpa.show-sql=true

# DDL 정의시 데이터베이스의 고유 기능을 사용합니다.
# ex) 테이블 생성, 삭제 등
spring.jpa.generate-ddl=true

# MySQL 을 사용할 것.
spring.jpa.database=mysql
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.format_sql=true

# MySQL 설정
#spring.cloud.gcp.sql.enabled=false
spring.cloud.gcp.sql.instance-connection-name=tripstory-283605:asia-northeast3:trip-story
spring.cloud.gcp.sql.database-name=tripstory
spring.datasource.initialization-mode=always
spring.profiles.active=mysql
#spring.datasource.url=jdbc:mysql:///tripstory?cloudSqlInstance=tripstory-283605:asia-northeast3:trip-story&socketFactory=com.google.cloud.sql.mysql.SocketFactory&user=server&password=1234
#spring.datasource.url=jdbc:mysql://34.64.171.189:3306/testdb?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC
spring.datasource.username=server
spring.datasource.password=1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# MySQL 상세 지정
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect